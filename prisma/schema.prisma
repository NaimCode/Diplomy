// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

///

model Utilisateur {
    id              String        @unique @default(uuid())
    email           String        @unique
    etablissementId String
    locale          String?
    isMembre        Boolean       @default(true)
    etablissement   Etablissement @relation(fields: [etablissementId], references: [id], onDelete: Cascade)
}

model Inscription {
    id            String   @id @default(uuid())
    etablissement String
    abrev         String
    identifiant   String?
    paysVille     String
    address       String?
    responsable   String
    email         String
    tel           String
    createAt      DateTime @default(now())
    updateAt      DateTime @updatedAt
}

model Etablissement {
    id               String        @id @default(uuid())
    createAt         DateTime      @default(now())
    updateAt         DateTime      @updatedAt
    abrev            String
    nom              String        @unique
    identifiant      String?
    paysVille        String?
    address          String?
    membresAutorises String[]      @unique @default([])
    membres          Utilisateur[]
    formations       Formation[]
}

model Formation {
    id       String   @id @default(uuid())
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    //fields
    intitule        String        @unique
    versionnage     Boolean       @default(true)

    //foreigh
    diplomeId String?  @unique
    diplome   Diplome? @relation(fields: [diplomeId], references: [id], onDelete: Cascade)
    etablissementId String
    etablissement   Etablissement @relation(fields: [etablissementId], references: [id], onDelete: Cascade)
    
    //extra
    versions Version[]
}

model Version {
    id       Int      @id
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    //fields

    //foreign
    formationId String
    diplomeId   String    @unique
    diplome     Diplome   @relation(fields: [diplomeId], references: [id], onDelete: Cascade)
    formation   Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)

    //extra
}

model Diplome {
    id       String   @id @default(uuid())
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    //fields
    intitule        String?
    intituleDiff    Boolean
    expiration      Boolean
    dureeExpiration Int?
    estVirtuel      Boolean

    //foreign
    canvasId String?
    canvas   Canvas? @relation(fields: [canvasId], references: [id], onDelete: Cascade)

    //extra
    version   Version?
    formation Formation?
}

model Canvas {
    id       String    @id @default(uuid())
    diplomes Diplome[]
}
